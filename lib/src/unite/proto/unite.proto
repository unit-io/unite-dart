syntax = "proto3";

package unite;

option go_package='unite';

service Unite {
rpc Start (ConnInfo) returns (ConnInfo){}
rpc Stream (stream Packet) returns (stream Packet);

rpc Stop (Empty) returns (Empty){}
}

message Empty {
}

message Packet {
bytes data=1;
}

message ConnInfo {
string client_id=1;
string network=2;
string address=3;
}

message InMsg {
	oneof Message {
		Conn conn = 1;
		Publish pub=2;
		Subscribe sub=3;
	}
}

message OutMsg {
	oneof Message {
		Connack connack=1;
		Puback puback=2;
		Suback suback=3;
	}
}

enum MessageType {
	RESERVED  = 0;
	CONNECT=1;
	CONNACK=2;
	PUBLISH=3;
	PUBACK=4;
	PUBREC=5;
	PUBREL=6;
	PUBCOMP=7;
	SUBSCRIBE=8;
	SUBACK=9;
	UNSUBSCRIBE=10;
	UNSUBACK=11;
	PINGREQ=12;
	PINGRESP=13;
	DISCONNECT=14;
}

message FixedHeader {
	MessageType MessageType = 1;
	bool Dup=2;
	int32 Qos=3;
	bool Retain=4;
	int32 RemainingLength=5;
}

// Connect represents a connect packet.
message Conn {
	string ProtoName=1;
	int32 Version=2;
	bool InsecureFlag=3;
	bool UsernameFlag=4;
	bool PasswordFlag=5;
	bool CleanSessFlag=9;
	int32 KeepAlive=10;
	string ClientID=11;
	string Username=14;
	string Password=15;
}

// Connack represents a connack packet.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused server unavailiable
// 0x04 bad user or password
// 0x05 not authorized
message Connack {
	int32 ReturnCode=1;
	int32 ConnID=2;
}

//Pingreq is a keepalive
message Pingreq {
}

//Pingresp is for saying "hey, the server is alive"
message Pingresp {
}

//Disconnect is to signal you want to cease communications with the server
message Disconnect {
	int32 MessageID=1;
}

// Publish represents a publish packet.
message Publish {
	int32 MessageID=1;
	string Topic=2;
	string Payload=3;
	int32 Qos=4;
}

//Puback is sent for QOS level one to verify the receipt of a publish
//Qot the spec: "A PUBACK Packet is sent by a server in response to a PUBLISH Packet from a publishing client, and by a subscriber in response to a PUBLISH Packet from the server."
message Puback {
	int32 MessageID=1;
}

//Pubrec is for verifying the receipt of a publish
//Qoth the spec:"It is the second Packet of the QoS level 2 protocol flow. A PUBREC Packet is sent by the server in response to a PUBLISH Packet from a publishing client, or by a subscriber in response to a PUBLISH Packet from the server."
message Pubrec {
	int32 MessageID=1;
	int32 Qos=2;
}

//Pubrel is a response to pubrec from either the client or server.
message Pubrel {
	int32 MessageID=1;
	int32 Qos=2;
}

//Pubcomp is for saying is in response to a pubrel sent by the publisher
//the final member of the QOS2 flow. both sides have said "hey, we did it!"
message Pubcomp {
	int32 MessageID=1;
}

//Subscriber is pairing the Qos and topic together
//for the QOS' pairs in unsubscribe and subscribe
message Subscriber {
	string Topic=2;
	int32 Qos=3;
}

//Subscribe tells the server which topics the client would like to subscribe to
message Subscribe {
	int32 MessageID=1;
	repeated Subscriber Subscribers=2;
}

//Suback is to say "hey, you got it buddy. I will send you messages that fit this pattern"
message Suback {
	int32 MessageID=1;
	repeated int32 Qos=2;
}

//Unsubscribe is the Packet to send if you don't want to subscribe to a topic anymore
message Unsubscribe {
	int32 MessageID=1;
	repeated Subscriber Subscribers=2;
}

//Unsuback is to unsubscribe as suback is to subscribe
message Unsuback {
	int32 MessageID=1;
}